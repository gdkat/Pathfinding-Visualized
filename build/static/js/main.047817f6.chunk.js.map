{"version":3,"sources":["PathfindingVisualizer/NodeGrid/gridHelper.js","reducers/PathfindingReducer.js","context/PathfindingContext.js","PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/NodeGrid/NodeGrid.jsx","search/dijkstra.js","search/astar.js","search/supportedAlgorithms.js","PathfindingVisualizer/components/accordion/Accordion.jsx","PathfindingVisualizer/Settings/Settings.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["defaultNode","weight","heuristic","Infinity","visited","visitedIndex","optimal","wall","prev","distance","unvisitedNode","genNodeGrid","gridProps","grid","rows","cols","start","end","i","row","j","push","col","isStart","isEnd","copyGrid","copyProps","unvisited","weighted","changeStart","changeEnd","newGrid","length","node","newNode","Object","entries","key","val","parseInt","Math","random","replaceNode","changeStartOrEndNode","initialGridProps","initialState","sortingProps","type","speed","active","mouseDown","movingStart","movingEnd","reducer","state","action","payload","PathfindingContext","createContext","Node","props","nodeProps","useContext","dispatch","classes","clsx","id","className","onMouseDown","e","preventDefault","complete","onMouseUp","onMouseEnter","style","NodeGrid","nodeGrid","onMouseLeave","map","rowIdx","nodeIdx","nodeCmp","a","b","supportedAlgorithms","dijkstra","visitedNodes","heap","Heap","found","visit","initDistance","calcDistance","updateItem","size","pop","traceOptimalPath","astar","sqrt","pow","Accordion","header","body","useState","setActive","onClick","Settings","initialX","initialY","currentX","currentY","offsetX","offsetY","dragging","setDragging","settingsDiv","useRef","useEffect","xPos","yPos","current","transform","softReset","accordions","htmlFor","name","value","onChange","target","options","selectedIndex","text","keys","el","index","step","parseFloat","disabled","width","defaultChecked","checked","ref","clientX","clientY","onMouseMove","currentTarget","accordion","gridCopy","result","PathfindingVisualizer","useReducer","pathfindingReducer","pathfindingInitialState","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oYAAMA,EAAc,CAClBC,OAAQ,EACRC,UAAWC,IACXC,SAAS,EACTC,aAAc,EACdC,SAAS,EACTC,MAAM,EACNC,KAAM,KACNC,SAAUN,KAGNO,EAAgB,CACpBN,SAAS,EACTC,aAAc,EACdC,SAAS,EACTE,KAAM,KACNC,SAAUN,IACVD,UAAWC,KAGAQ,EAAc,SAACC,GAI1B,IAHA,IAAMC,EAAO,GACLC,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,KAAMC,EAAeJ,EAAfI,MAAOC,EAAQL,EAARK,IAElBC,EAAI,EAAGA,EAAIJ,EAAMI,IAAK,CAE7B,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIL,EAAMK,IACxBD,EAAIE,KAAJ,2BACKrB,GADL,IAEEmB,IAAKD,EACLI,IAAKF,EACLG,QAASL,IAAMF,EAAMG,KAAOC,IAAMJ,EAAMM,IACxCE,MAAON,IAAMD,EAAIE,KAAOC,IAAMH,EAAIK,OAItCT,EAAKQ,KAAKF,GAGZ,OAAON,GAGIY,EAAW,SAACZ,GAIvB,IAJiD,IAApBa,EAAmB,uDAAP,GACjCC,EAAgDD,EAAhDC,UAAWC,EAAqCF,EAArCE,SAAUC,EAA2BH,EAA3BG,YAAaC,EAAcJ,EAAdI,UACpCC,EAAU,GAEPb,EAAI,EAAGA,EAAIL,EAAKmB,OAAQd,IAAK,CACpCa,EAAQV,KAAK,IACb,IAAK,IAAID,EAAI,EAAGA,EAAIP,EAAKK,GAAGc,OAAQZ,IAAK,CAGvC,IAFA,IAAMa,EAAOpB,EAAKK,GAAGE,GACfc,EAAU,GAChB,MAAyBC,OAAOC,QAAQH,GAAxC,0CAAYI,EAAZ,KAAiBC,EAAjB,KAA+CJ,EAAQG,GAAOC,EAC9D,GAAIX,EACF,cAAyBQ,OAAOC,QAAQ1B,GAAxC,0CAAY2B,EAAZ,KAAiBC,EAAjB,KACEJ,EAAQG,GAAOC,EACfT,IAAaK,EAAQX,SAAU,GAC/BO,IAAWI,EAAQV,OAAQ,IACd,IAAbI,EAAmBM,EAAQjC,OAASsC,SAAyB,GAAhBC,KAAKC,WAChC,IAAbb,IAAoBM,EAAQjC,OAAS,GAC9C8B,EAAQb,GAAGG,KAAKa,IAIpB,OAAOH,GAGIW,EAAc,SAACT,EAAMpB,GAAS,IAGjCM,EAAac,EAAbd,IAAKG,EAAQW,EAARX,IAIb,OAFAT,EAAKM,GAAKG,GAAV,eAAsBW,GAEfpB,GAGI8B,EAAuB,SAACV,EAAMpB,EAAMI,GAC/C,IAAMc,EAAUN,EAASZ,EAAM,CAAEgB,aAAcZ,EAAKa,UAAWb,IAEvDE,EAAac,EAAbd,IAAKG,EAAQW,EAARX,IAKb,OAHSS,EAAQZ,GAAKG,GAAlBL,EAAK,2BAAyBgB,GAAzB,IAA+BT,OAAO,IAC1C,2BAAyBS,GAAzB,IAA+BV,SAAS,IAEtCQ,GC9EHa,EAAmB,CACvB9B,KAAM,GACNC,KAAM,GACNC,MAAO,CACLG,IAAK,GACLG,IAAK,IAEPL,IAAK,CACHE,IAAK,GACLG,IAAK,IAEPM,UAAU,GAGCiB,EAAe,CAC1BjC,UAAWgC,EACX/B,KAAMF,EAAYiC,GAElBE,aAAc,CACZC,KAAM,WACNC,MAAO,GACPC,QAAQ,GAEVC,WAAW,EACXC,aAAa,EACbC,WAAW,GAGAC,EAAU,SAACC,EAAOC,GAC7B,OAAQA,EAAOR,MACb,IAAK,iBACH,OAAO,2BACFO,GADL,IAEE1C,UAAW2C,EAAOC,QAClB3C,KAAMF,EAAY4C,EAAOC,WAE7B,IAAK,oBACH,OAAO,2BACFF,GADL,IAEE1C,UAAU,2BACL0C,EAAM1C,WADF,IAEPgB,SAAU2B,EAAOC,YAGvB,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmBzC,KAAM0C,EAAOC,UAClC,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmBzC,KAAM6B,EAAYa,EAAOC,QAASF,EAAMzC,QAC7D,IAAK,eACH,OAAO,2BAAKyC,GAAZ,IAAmBH,aAAa,IAClC,IAAK,aACH,OAAO,2BACFG,GADL,IAEEzC,KAAM8B,EAAqBY,EAAOC,QAASF,EAAMzC,MACjDD,UAAU,2BACL0C,EAAM1C,WADF,IAEPI,MAAO,CACLG,IAAKoC,EAAOC,QAAQrC,IACpBG,IAAKiC,EAAOC,QAAQlC,SAI5B,IAAK,YACH,OAAO,2BAAKgC,GAAZ,IAAmBH,aAAa,IAClC,IAAK,aACH,OAAO,2BAAKG,GAAZ,IAAmBF,WAAW,IAChC,IAAK,WACH,OAAO,2BACFE,GADL,IAEEzC,KAAM8B,EAAqBY,EAAOC,QAASF,EAAMzC,MAAM,GACvDD,UAAU,2BACL0C,EAAM1C,WADF,IAEPK,IAAK,CACHE,IAAKoC,EAAOC,QAAQrC,IACpBG,IAAKiC,EAAOC,QAAQlC,SAI5B,IAAK,UACH,OAAO,2BAAKgC,GAAZ,IAAmBF,WAAW,IAGhC,IAAK,oBACH,OAAO,2BACFE,GADL,IAEER,aAAa,2BACRQ,EAAMR,cACNS,EAAOC,WAGhB,IAAK,oBACH,OAAO,2BACFF,GADL,IAEER,aAAa,2BACRQ,EAAMR,cADC,IAEVE,MAAOO,EAAOC,YAGpB,IAAK,mBACH,OAAO,2BACFF,GADL,IAEER,aAAa,2BACRQ,EAAMR,cADC,IAEVC,KAAMQ,EAAOC,YAGnB,IAAK,qBACH,OAAO,2BACFF,GADL,IAEER,aAAa,2BACRQ,EAAMR,cADC,IAEVG,QAAQ,MAGd,IAAK,uBACH,OAAO,2BACFK,GADL,IAEER,aAAa,2BACRQ,EAAMR,cADC,IAEVG,QAAQ,MAGd,IAAK,iBACH,OAAO,2BAAKK,GAAZ,IAAmBJ,WAAW,IAChC,IAAK,eACH,OAAO,2BAAKI,GAAZ,IAAmBJ,WAAW,IAChC,QACE,OAAOI,ICjIEG,EAFYC,0B,wCCsGZC,EAnGF,SAACC,GAAW,IAAD,EAclBA,EAAMC,UAZR1C,EAFoB,EAEpBA,IACAG,EAHoB,EAGpBA,IACArB,EAJoB,EAIpBA,OAEAG,GANoB,EAKpBF,UALoB,EAMpBE,SACAC,EAPoB,EAOpBA,aACAC,EARoB,EAQpBA,QACAC,EAToB,EASpBA,KAGAgB,GAZoB,EAUpBf,KAVoB,EAWpBC,SAXoB,EAYpBc,SACAC,EAboB,EAapBA,MAboB,EAyBlBsC,qBAAWL,GAzBO,0BAkBlBP,EAlBkB,EAkBlBA,UACAJ,EAnBkB,EAmBlBA,aACAK,EApBkB,EAoBlBA,YACAC,EArBkB,EAqBlBA,UACaxB,EAtBK,EAsBlBhB,UAAagB,SAEfmC,EAxBoB,KA2BhBC,EAAUC,IAAK,CACnBhC,MAAM,EACN,eAAgB7B,EAChB,eAAgBE,EAChB,YAAaC,EACb,aAAcgB,EACd,WAAYC,IA+Cd,OACE,qBACE0C,GAAE,UAAK/C,EAAL,YAAYG,GACd6C,UAAWH,EACXI,YAhDgB,SAACC,GACnBA,EAAEC,iBACFP,EAAS,CAAEhB,KAAM,mBACZD,EAAaG,QAAWH,EAAayB,UAC3BR,EAATxC,EAAkB,CAAEwB,KAAM,gBACrBvB,EAAgB,CAAEuB,KAAM,cAEtB,CACPA,KAAM,WACNS,QAAQ,2BAAMI,EAAMC,WAAb,IAAwBtD,MAAOA,OAwC1CiE,UAnCc,SAACH,GACjBA,EAAEC,iBACFpB,GAAaa,EAAS,CAAEhB,KAAM,iBAC1BI,EAAaY,EAAS,CAAEhB,KAAM,cACzBK,GAAWW,EAAS,CAAEhB,KAAM,aAgCnC0B,aA7BiB,SAACJ,GACpBA,EAAEC,kBACEpB,GAAcJ,EAAaG,QAAWH,EAAayB,WACjDpB,EACFY,EAAS,CACPhB,KAAM,aACNS,QAASI,EAAMC,YAEVT,EACPW,EAAS,CACPhB,KAAM,WACNS,QAASI,EAAMC,aAGhBtC,IACEC,GACDuC,EAAS,CACPhB,KAAM,WACNS,QAAQ,2BAAMI,EAAMC,WAAb,IAAwBtD,MAAOA,QAY5CmE,MAAO,CACL,UAAWrE,EACX,gBAAgB,GAAhB,OAAoByC,EAAaE,MAAjC,OARJ,SAWGpB,IAAarB,IAASgB,GACrB,qBAAK4C,UAAU,cAAf,SAA8BlE,OCvEvB0E,G,OAtBE,SAACf,GAAW,IACnBgB,EAAahB,EAAbgB,SADkB,EAEQd,qBAAWL,GAFnB,mBAEJM,GAFI,KAEjBb,UAFiB,MAI1B,OACE,qBACEiB,UAAU,YACVU,aAAc,SAACR,GAAD,OAAON,EAAS,CAAEhB,KAAM,kBAFxC,SAIG6B,EAASE,KAAI,SAAC3D,EAAK4D,GAClB,OACE,qBAAkBZ,UAAU,gBAA5B,SACGhD,EAAI2D,KAAI,SAAC7C,EAAM+C,GAAP,OACP,cAAC,EAAD,CAAkCnB,UAAW5B,GAA7C,UAAc8C,GAAd,OAAuBC,QAFjBD,U,iBCddE,EAAU,SAACC,EAAGC,GAClB,OAAOD,EAAEzE,SAAW0E,EAAE1E,UCDlBwE,EAAU,SAACC,EAAGC,GAClB,OAAOD,EAAEhF,UAAYgF,EAAEzE,UAAY0E,EAAEjF,UAAYiF,EAAE1E,WCKtC2E,EALa,CAC1BC,SFEe,SAACxE,EAAMD,GACtB,IAAM0E,EAAe,GACfhF,EAAU,GACViF,EAAO,IAAIC,IAAKP,GACtBM,EAAKlE,KAAKR,EAAKD,EAAUI,MAAMG,KAAKP,EAAUI,MAAMM,MAgDpD,IApDoC,IAM5BR,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KAEV0E,EAAQ,KAENC,EAAQ,SAACzD,GACb,GAAY,MAARA,KAAiBA,EAAK1B,MAAS0B,EAAKV,SAAYU,EAAKT,OAAzD,CAEAS,EAAK7B,SAAU,EACfkF,EAAajE,KAAKY,GAClBA,EAAK5B,aAAeiF,EAAatD,OAAS,EALpB,IAOdb,EAAac,EAAbd,IAAKG,EAAQW,EAARX,IAEb,GADIW,EAAKV,UAASU,EAAKxB,SAAW,GAC9BwB,EAAKT,MACPiE,EAAQxD,OAGV,IAAK,IAAIf,EAAIC,EAAM,EAAGD,GAAKC,EAAM,EAAGD,IAClC,KAAIA,EAAI,GAAKA,GAAKL,EAAKmB,QACvB,IAAK,IAAIZ,EAAIE,EAAM,EAAGF,GAAKE,EAAM,EAAGF,IAClC,IAAIF,IAAMC,GAAOC,IAAME,MACnBF,EAAI,GAAKA,GAAKP,EAAKK,GAAGc,QAAUnB,EAAKK,GAAGE,GAAGhB,SAA/C,CAEA,IAAMuF,EAAe9E,EAAKK,GAAGE,GAAGX,SAC1BmF,EAAe/E,EAAKK,GAAGE,GAAGnB,OAASgC,EAAKxB,SAC1CkF,EAAeC,IACjB/E,EAAKK,GAAGE,GAAGX,SAAWmF,EACtB/E,EAAKK,GAAGE,GAAGZ,KAAOyB,GAGhB0D,IAAiBxF,IAAUoF,EAAKlE,KAAKR,EAAKK,GAAGE,IAC5CmE,EAAKM,WAAWhF,EAAKK,GAAGE,QAe3BqE,GAASH,EAAatD,OAASlB,EAAOC,GAAQwE,EAAKO,OAAS,GAClEJ,EAAMH,EAAKQ,OAIb,OAFIN,GAbqB,WAGvB,IAFA,IAAIjF,EAAOiF,EAEI,MAARjF,GACLA,EAAKF,SAAU,EACfA,EAAQe,KAAKb,GACbA,EAAOA,EAAKA,KAOLwF,GAEJ,CAACnF,EAAMyE,EAAchF,IE1D5B2F,MDCY,SAACpF,EAAMD,GACnB,IAAM0E,EAAe,GACfhF,EAAU,GACViF,EAAO,IAAIC,IAAKP,GACtBM,EAAKlE,KAAKR,EAAKD,EAAUI,MAAMG,KAAKP,EAAUI,MAAMM,MAsDpD,IA1DiC,IAMzBR,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KAEV0E,EAAQ,KAENC,EAAQ,SAACzD,GACb,GAAY,MAARA,KAAiBA,EAAK1B,MAAS0B,EAAKV,SAAYU,EAAKT,OAAzD,CAEAS,EAAK7B,SAAU,EACfkF,EAAajE,KAAKY,GAClBA,EAAK5B,aAAeiF,EAAatD,OAAS,EALpB,IAOdb,EAAac,EAAbd,IAAKG,EAAQW,EAARX,IAEb,GADIW,EAAKV,UAASU,EAAKxB,SAAW,GAC9BwB,EAAKT,MACPiE,EAAQxD,OAGV,IAAK,IAAIf,EAAIC,EAAM,EAAGD,GAAKC,EAAM,EAAGD,IAClC,KAAIA,EAAI,GAAKA,GAAKL,EAAKmB,QACvB,IAAK,IAAIZ,EAAIE,EAAM,EAAGF,GAAKE,EAAM,EAAGF,IAClC,IAAIF,IAAMC,GAAOC,IAAME,MACnBF,EAAI,GAAKA,GAAKP,EAAKK,GAAGc,QAAUnB,EAAKK,GAAGE,GAAGhB,SAA/C,CAEA,IAAMuF,EAAe9E,EAAKK,GAAGE,GAAGX,SAC1BmF,EAAe/E,EAAKK,GAAGE,GAAGnB,OAASgC,EAAKxB,SACxCP,EAAYsC,KAAK0D,KACrB1D,KAAK2D,IAAIjF,EAAIN,EAAUK,IAAIE,IAAK,GAC9BqB,KAAK2D,IAAI/E,EAAIR,EAAUK,IAAIK,IAAK,IAGhCqE,EAAeC,IACjB/E,EAAKK,GAAGE,GAAGX,SAAWmF,EACtB/E,EAAKK,GAAGE,GAAGZ,KAAOyB,EAClBpB,EAAKK,GAAGE,GAAGlB,UAAYA,GAGrByF,IAAiBxF,IAAUoF,EAAKlE,KAAKR,EAAKK,GAAGE,IAC5CmE,EAAKM,WAAWhF,EAAKK,GAAGE,QAe3BqE,GAASH,EAAatD,OAASlB,EAAOC,GAAQwE,EAAKO,OAAS,GAClEJ,EAAMH,EAAKQ,OAIb,OAFIN,GAbqB,WAGvB,IAFA,IAAIjF,EAAOiF,EAEI,MAARjF,GACLA,EAAKF,SAAU,EACfA,EAAQe,KAAKb,GACbA,EAAOA,EAAKA,KAOLwF,GAEJ,CAACnF,EAAMyE,EAAchF,KE9Cf8F,G,cAnBG,SAACxC,GAAW,IACpByC,EAAiBzC,EAAjByC,OAAQC,EAAS1C,EAAT0C,KADW,EAECC,oBAAS,GAFV,mBAEpBtD,EAFoB,KAEZuD,EAFY,KAIrBxC,EAAUC,IAAK,CACnB,oBAAoB,EACpBhB,OAAQA,IAGV,OACE,sBAAKkB,UAAU,YAAf,UACE,wBAAQA,UAAWH,EAASyC,QAAS,kBAAMD,GAAWvD,IAAtD,SACGoD,IAEFpD,GAAU,qBAAKkB,UAAU,QAAf,SAAwBmC,SCmP1BI,EA9PE,SAAC9C,GAAW,IAAD,EACAE,qBAAWL,GADX,mBACnBH,EADmB,KACZS,EADY,KAElBnD,EAAkC0C,EAAlC1C,UAAWC,EAAuByC,EAAvBzC,KAAMiC,EAAiBQ,EAAjBR,aAFC,EAGMyD,mBAAS,CACvCtD,QAAQ,EACR0D,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,QAAS,EACTC,QAAS,IAVe,mBAGnBC,EAHmB,KAGTC,EAHS,KAYpBC,EAAcC,iBAAO,MAE3BC,qBAAU,WACR,IAAsBC,EAAMC,EAI5BN,EAAShE,SAJaqE,EAKPL,EAASJ,SALIU,EAKMN,EAASH,SAAUK,EAAYK,QAJ5D9C,MAAM+C,UAAY,eAAiBH,EAAO,OAASC,EAAO,YAK9D,CAACN,IAEJ,IAKMS,EAAY,WAChB3D,EAAS,CACPhB,KAAM,WACNS,QAAS/B,EAASZ,EAAM,CAAEc,WAAW,MAEvCoC,EAAS,CAAEhB,KAAM,0BA4Db4E,EAAa,CACjB,CACEtB,OAAQ,uBACRC,KACE,qCACE,uBAAOsB,QAAQ,QAAf,mCACA,wBACE1D,GAAG,QACH2D,KAAK,QACLC,MAAOhF,EAAaC,KACpBgF,SAtCW,SAAC1D,GACpBqD,IACA3D,EAAS,CACPhB,KAAM,mBACNS,QAASa,EAAE2D,OAAOC,QAAQ5D,EAAE2D,OAAOE,eAAeC,QA8B9C,SAMGhG,OAAOiG,KAAKhD,GAAqBN,KAAI,SAACuD,EAAIC,GAAL,OACpC,wBAAoBR,MAAOO,EAA3B,SACGA,GADUC,QAIP,IACV,uBACA,uBAAOV,QAAQ,kBAAf,0BACA,uBACE7E,KAAK,SACLwF,KAAK,IACLV,KAAK,kBACLE,SAnEqB,SAAC1D,GAAD,OAC7BN,EAAS,CACPhB,KAAM,oBACNS,QAASgF,WAAWnE,EAAE2D,OAAOF,UAiEvBA,MAAOhF,EAAaE,MACpByF,SAAU3F,EAAaG,aAK/B,CACEoD,OAAQ,kBACRC,KACE,qCACE,sDACA,uBAFF,QAGQ,IACN,uBACEvD,KAAK,SACLmB,GAAG,YACH2D,KAAK,YACLC,MAAOlH,EAAUE,KAEjB2H,SAAU3F,EAAaG,OACvByB,MAAO,CACLgE,MAAO,IAETX,SAAU,SAAC1D,GAAD,OACRN,EAAS,CACPhB,KAAM,iBACNS,QAAQ,2BAAMF,EAAM1C,WAAb,IAAwBE,KAAMuD,EAAE2D,OAAOF,aAGjD,IApBL,QAqBQ,IACN,uBACE/E,KAAK,SACLmB,GAAG,YACH2D,KAAK,YACLC,MAAOlH,EAAUG,KAEjB0H,SAAU3F,EAAaG,OACvByB,MAAO,CACLgE,MAAO,IAETX,SAAU,SAAC1D,GAAD,OACRN,EAAS,CACPhB,KAAM,iBACNS,QAAQ,2BAAMF,EAAM1C,WAAb,IAAwBG,KAAMsD,EAAE2D,OAAOF,aAIpD,uBACA,uBAAOF,QAAQ,WAAf,6BACA,uBACE7E,KAAK,WACLmB,GAAG,WACH2D,KAAK,WACLC,MAAM,WACNa,eAAgB/H,EAAUgB,SAC1B6E,QAtHe,SAACpC,GACxBN,EAAS,CAAEhB,KAAM,oBAAqBS,QAASa,EAAE2D,OAAOY,WACnC,IAArBvE,EAAE2D,OAAOY,SACP7E,EAAS,CACPhB,KAAM,WACNS,QAAS/B,EAASZ,EAAM,CAAEc,WAAW,EAAMC,UAAU,OAkHjD6G,SAAU3F,EAAaG,SAExBrC,EAAUgB,UACT,qCACE,uBACA,wBACEuC,UAAU,8BACVsC,QA7GsB,SAACpC,GACnCN,EAAS,CACPhB,KAAM,WACNS,QAAS/B,EAASZ,EAAM,CAAEc,WAAW,EAAMC,UAAU,OA2G3C6G,SAAU3F,EAAaG,OAHzB,6CAcZ,OACE,sBACEkB,UACE,YACCb,EAAMJ,YAAcI,EAAMR,aAAaG,OAAS,gBAAkB,IAErE4F,IAAK1B,EAEL3C,UAAW,SAACH,GACV6C,EAAY,2BACPD,GADM,IAEThE,QAAQ,EACR0D,SAAUM,EAASJ,SACnBD,SAAUK,EAASH,aAGvBjC,aAAc,SAACR,GACb4C,EAAShE,QACPiE,EAAY,2BACPD,GADM,IAEThE,QAAQ,EACR0D,SAAUM,EAASJ,SACnBD,SAAUK,EAASH,aAGzB1C,YAAa,SAACC,GACZ6C,EAAY,2BACPD,GADM,IAEThE,QAAQ,EACR8D,QAAS1C,EAAEyE,QAAU7B,EAASN,SAC9BK,QAAS3C,EAAE0E,QAAU9B,EAASL,aAGlCoC,YAnJW,SAAC3E,GAGd,IAAIwC,EAAUC,GAFTG,EAAShE,QAAUoB,EAAE4E,gBAAkB9B,EAAYK,WAGxDnD,EAAEC,iBAGFuC,EAAWxC,EAAEyE,QAAU7B,EAASF,QAChCD,EAAWzC,EAAE0E,QAAU9B,EAASD,QAEhCE,EAAY,2BAAKD,GAAN,IAAgBJ,WAAUC,gBAyGrC,UAkCE,oBAAI3C,UAAU,kBAAd,oCACA,qBAAKA,UAAU,mBAAf,SACGwD,EAAW7C,KAAI,SAACoE,EAAWZ,GAAZ,OACd,cAAC,EAAD,CAEEjC,OAAQ6C,EAAU7C,OAClBC,KAAM4C,EAAU5C,MAFX4C,EAAU7C,OAASiC,QAM9B,gCACE,wBAAQnE,UAAU,iBAAiBsC,QA5MnB,WACpB,IAAI3D,EAAaG,OAAjB,CAEAc,EAAS,CAAEhB,KAAM,uBACjB,IAAMoG,EAAW1H,EAASZ,EAAM,CAAEc,WAAW,IAC7C,GAAuB,MAAnBf,EAAUI,OAAkC,MAAjBJ,EAAUK,IAAa,CAAC,IAAD,EACnCmE,EAAoBtC,EAAaC,MAChDoG,EACAvI,GAFKwI,EAD6C,oBAKpDrF,EAAS,CAAEhB,KAAM,WAAYS,QAAS4F,OAkMpC,uBAGA,wBAAQjF,UAAU,iBAAiBsC,QAASiB,EAA5C,wBAGA,wBAAQvD,UAAU,YAAYsC,QA/NtB,WACZ1C,EAAS,CAAEhB,KAAM,WAAYS,QAAS7C,EAAYC,KAClDmD,EAAS,CAAEhB,KAAM,0BA6Nb,0BCjOOsG,EAlBe,SAACzF,GAAW,IAAD,EACb0F,qBACxBC,EACAC,GAHqC,mBAChClG,EADgC,KACzBS,EADyB,KAM/BlD,EAASyC,EAATzC,KAER,OACE,cAAC,EAAmB4I,SAApB,CAA6B3B,MAAO,CAACxE,EAAOS,GAA5C,SACE,sBAAKI,UAAU,yBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUS,SAAU/D,UCXb6I,MARf,WACE,OACE,qBAAKvF,UAAU,MAAf,SACE,cAAC,EAAD,OCMSwF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCIdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.047817f6.chunk.js","sourcesContent":["const defaultNode = {\r\n  weight: 1,\r\n  heuristic: Infinity,\r\n  visited: false,\r\n  visitedIndex: 0,\r\n  optimal: false,\r\n  wall: false,\r\n  prev: null,\r\n  distance: Infinity,\r\n};\r\n\r\nconst unvisitedNode = {\r\n  visited: false,\r\n  visitedIndex: 0,\r\n  optimal: false,\r\n  prev: null,\r\n  distance: Infinity,\r\n  heuristic: Infinity,\r\n};\r\n\r\nexport const genNodeGrid = (gridProps) => {\r\n  const grid = [];\r\n  const { rows, cols, start, end } = gridProps;\r\n\r\n  for (let i = 0; i < rows; i++) {\r\n    const row = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push({\r\n        ...defaultNode,\r\n        row: i,\r\n        col: j,\r\n        isStart: i === start.row && j === start.col,\r\n        isEnd: i === end.row && j === end.col,\r\n      });\r\n    }\r\n\r\n    grid.push(row);\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nexport const copyGrid = (grid, copyProps = {}) => {\r\n  const { unvisited, weighted, changeStart, changeEnd } = copyProps;\r\n  const newGrid = [];\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    newGrid.push([]);\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      const node = grid[i][j];\r\n      const newNode = {};\r\n      for (const [key, val] of Object.entries(node)) newNode[key] = val;\r\n      if (unvisited)\r\n        for (const [key, val] of Object.entries(unvisitedNode))\r\n          newNode[key] = val;\r\n      if (changeStart) newNode.isStart = false;\r\n      if (changeEnd) newNode.isEnd = false;\r\n      if (weighted === true) newNode.weight = parseInt(Math.random() * 10);\r\n      else if (weighted === false) newNode.weight = 1;\r\n      newGrid[i].push(newNode);\r\n    }\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nexport const replaceNode = (node, grid) => {\r\n  // const newGrid = copyGrid(grid);\r\n\r\n  const { row, col } = node;\r\n\r\n  grid[row][col] = { ...node };\r\n\r\n  return grid;\r\n};\r\n\r\nexport const changeStartOrEndNode = (node, grid, end) => {\r\n  const newGrid = copyGrid(grid, { changeStart: !end, changeEnd: end });\r\n\r\n  const { row, col } = node;\r\n\r\n  if (end) newGrid[row][col] = { ...node, isEnd: true };\r\n  else newGrid[row][col] = { ...node, isStart: true };\r\n\r\n  return newGrid;\r\n};\r\n","import {\r\n  genNodeGrid,\r\n  replaceNode,\r\n  changeStartOrEndNode,\r\n} from \"../PathfindingVisualizer/NodeGrid/gridHelper\";\r\n\r\nconst initialGridProps = {\r\n  rows: 20,\r\n  cols: 50,\r\n  start: {\r\n    row: 10,\r\n    col: 10,\r\n  },\r\n  end: {\r\n    row: 10,\r\n    col: 20,\r\n  },\r\n  weighted: false,\r\n};\r\n\r\nexport const initialState = {\r\n  gridProps: initialGridProps,\r\n  grid: genNodeGrid(initialGridProps),\r\n  // visitedArr: [],\r\n  sortingProps: {\r\n    type: \"dijkstra\",\r\n    speed: 10,\r\n    active: false,\r\n  },\r\n  mouseDown: false,\r\n  movingStart: false,\r\n  movingEnd: false,\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SET_GRID_PROPS\":\r\n      return {\r\n        ...state,\r\n        gridProps: action.payload,\r\n        grid: genNodeGrid(action.payload),\r\n      };\r\n    case \"SET_WEIGHTED_GRID\":\r\n      return {\r\n        ...state,\r\n        gridProps: {\r\n          ...state.gridProps,\r\n          weighted: action.payload,\r\n        },\r\n      };\r\n    case \"SET_GRID\":\r\n      return { ...state, grid: action.payload };\r\n    case \"SET_NODE\":\r\n      return { ...state, grid: replaceNode(action.payload, state.grid) };\r\n    case \"MOVING_START\":\r\n      return { ...state, movingStart: true };\r\n    case \"MOVE_START\":\r\n      return {\r\n        ...state,\r\n        grid: changeStartOrEndNode(action.payload, state.grid),\r\n        gridProps: {\r\n          ...state.gridProps,\r\n          start: {\r\n            row: action.payload.row,\r\n            col: action.payload.col,\r\n          },\r\n        },\r\n      };\r\n    case \"SET_START\":\r\n      return { ...state, movingStart: false };\r\n    case \"MOVING_END\":\r\n      return { ...state, movingEnd: true };\r\n    case \"MOVE_END\":\r\n      return {\r\n        ...state,\r\n        grid: changeStartOrEndNode(action.payload, state.grid, true),\r\n        gridProps: {\r\n          ...state.gridProps,\r\n          end: {\r\n            row: action.payload.row,\r\n            col: action.payload.col,\r\n          },\r\n        },\r\n      };\r\n    case \"SET_END\":\r\n      return { ...state, movingEnd: false };\r\n    // case \"SET_VISITED_ARR\":\r\n    //   return { ...state, visitedArr: action.payload };\r\n    case \"SET_SORTING_PROPS\":\r\n      return {\r\n        ...state,\r\n        sortingProps: {\r\n          ...state.sortingProps,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case \"SET_SORTING_SPEED\":\r\n      return {\r\n        ...state,\r\n        sortingProps: {\r\n          ...state.sortingProps,\r\n          speed: action.payload,\r\n        },\r\n      };\r\n    case \"SET_SORTING_TYPE\":\r\n      return {\r\n        ...state,\r\n        sortingProps: {\r\n          ...state.sortingProps,\r\n          type: action.payload,\r\n        },\r\n      };\r\n    case \"SET_SORTING_ACTIVE\":\r\n      return {\r\n        ...state,\r\n        sortingProps: {\r\n          ...state.sortingProps,\r\n          active: true,\r\n        },\r\n      };\r\n    case \"SET_SORTING_INACTIVE\":\r\n      return {\r\n        ...state,\r\n        sortingProps: {\r\n          ...state.sortingProps,\r\n          active: false,\r\n        },\r\n      };\r\n    case \"SET_MOUSE_DOWN\":\r\n      return { ...state, mouseDown: true };\r\n    case \"SET_MOUSE_UP\":\r\n      return { ...state, mouseDown: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nconst PathfindingContext = createContext();\r\n\r\nexport default PathfindingContext;\r\n","import { useContext, useEffect } from \"react\";\r\nimport \"./Node.css\";\r\nimport clsx from \"classnames\";\r\nimport PathfindingContext from \"../../context/PathfindingContext\";\r\n\r\nconst Node = (props) => {\r\n  const {\r\n    row, // row index\r\n    col, // col index\r\n    weight, // weight to travel through\r\n    heuristic, // heuristic value for astr\r\n    visited, // visited boolean\r\n    visitedIndex, // index (in order) of vars visited\r\n    optimal, // is part of optimal path\r\n    wall, // is wall\r\n    prev, // previous node in trail\r\n    distance, // distance from start\r\n    isStart, // isStart\r\n    isEnd, // isFinish\r\n  } = props.nodeProps;\r\n\r\n  const [\r\n    {\r\n      mouseDown,\r\n      sortingProps,\r\n      movingStart,\r\n      movingEnd,\r\n      gridProps: { weighted },\r\n    },\r\n    dispatch,\r\n  ] = useContext(PathfindingContext);\r\n\r\n  const classes = clsx({\r\n    node: true,\r\n    \"node-visited\": visited,\r\n    \"node-optimal\": optimal,\r\n    \"node-wall\": wall,\r\n    \"node-start\": isStart,\r\n    \"node-end\": isEnd,\r\n  });\r\n\r\n  const onMouseDown = (e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"SET_MOUSE_DOWN\" });\r\n    if (!sortingProps.active && !sortingProps.complete) {\r\n      if (isStart) dispatch({ type: \"MOVING_START\" });\r\n      else if (isEnd) dispatch({ type: \"MOVING_END\" });\r\n      else\r\n        dispatch({\r\n          type: \"SET_NODE\",\r\n          payload: { ...props.nodeProps, wall: !wall },\r\n        });\r\n    }\r\n  };\r\n\r\n  const onMouseUp = (e) => {\r\n    e.preventDefault();\r\n    mouseDown && dispatch({ type: \"SET_MOUSE_UP\" });\r\n    if (movingStart) dispatch({ type: \"SET_START\" });\r\n    else if (movingEnd) dispatch({ type: \"SET_END\" });\r\n  };\r\n\r\n  const onMouseEnter = (e) => {\r\n    e.preventDefault();\r\n    if (mouseDown && !sortingProps.active && !sortingProps.complete) {\r\n      if (movingStart)\r\n        dispatch({\r\n          type: \"MOVE_START\",\r\n          payload: props.nodeProps,\r\n        });\r\n      else if (movingEnd)\r\n        dispatch({\r\n          type: \"MOVE_END\",\r\n          payload: props.nodeProps,\r\n        });\r\n      else\r\n        !isStart &&\r\n          !isEnd &&\r\n          dispatch({\r\n            type: \"SET_NODE\",\r\n            payload: { ...props.nodeProps, wall: !wall },\r\n          });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id={`${row}-${col}`}\r\n      className={classes}\r\n      onMouseDown={onMouseDown}\r\n      onMouseUp={onMouseUp}\r\n      onMouseEnter={onMouseEnter}\r\n      style={{\r\n        \"--delay\": visitedIndex,\r\n        \"--delayFactor\": `${sortingProps.speed}ms`,\r\n      }}\r\n    >\r\n      {weighted && !wall && !isStart && (\r\n        <div className=\"node-weight\">{weight}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import { useContext } from \"react\";\r\nimport PathfindingContext from \"../../context/PathfindingContext\";\r\nimport Node from \"../Node/Node\";\r\nimport \"./NodeGrid.css\";\r\n\r\nconst NodeGrid = (props) => {\r\n  const { nodeGrid } = props;\r\n  const [{ mouseDown }, dispatch] = useContext(PathfindingContext);\r\n\r\n  return (\r\n    <div\r\n      className=\"node-grid\"\r\n      onMouseLeave={(e) => dispatch({ type: \"SET_MOUSE_UP\" })}\r\n    >\r\n      {nodeGrid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx} className=\"node-grid-row\">\r\n            {row.map((node, nodeIdx) => (\r\n              <Node key={`${rowIdx}${nodeIdx}`} nodeProps={node} />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodeGrid;\r\n","import Heap from \"heap\";\r\n\r\nconst nodeCmp = (a, b) => {\r\n  return a.distance - b.distance;\r\n};\r\n\r\nconst dijkstra = (grid, gridProps) => {\r\n  const visitedNodes = [];\r\n  const optimal = [];\r\n  const heap = new Heap(nodeCmp);\r\n  heap.push(grid[gridProps.start.row][gridProps.start.col]);\r\n\r\n  const { rows, cols } = gridProps;\r\n\r\n  let found = null;\r\n\r\n  const visit = (node) => {\r\n    if (node == null || (node.wall && !node.isStart && !node.isEnd)) return;\r\n\r\n    node.visited = true;\r\n    visitedNodes.push(node);\r\n    node.visitedIndex = visitedNodes.length - 1;\r\n\r\n    const { row, col } = node;\r\n    if (node.isStart) node.distance = 0;\r\n    if (node.isEnd) {\r\n      found = node;\r\n      return;\r\n    }\r\n    for (let i = row - 1; i <= row + 1; i++) {\r\n      if (i < 0 || i >= grid.length) continue;\r\n      for (let j = col - 1; j <= col + 1; j++) {\r\n        if (i !== row && j !== col) continue; // diagonals not counted, may choose to change that later\r\n        if (j < 0 || j >= grid[i].length || grid[i][j].visited) continue;\r\n\r\n        const initDistance = grid[i][j].distance;\r\n        const calcDistance = grid[i][j].weight + node.distance;\r\n        if (initDistance > calcDistance) {\r\n          grid[i][j].distance = calcDistance;\r\n          grid[i][j].prev = node;\r\n        }\r\n\r\n        if (initDistance === Infinity) heap.push(grid[i][j]);\r\n        else heap.updateItem(grid[i][j]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const traceOptimalPath = () => {\r\n    let prev = found;\r\n\r\n    while (prev != null) {\r\n      prev.optimal = true;\r\n      optimal.push(prev);\r\n      prev = prev.prev;\r\n    }\r\n  };\r\n\r\n  while (!found && visitedNodes.length < rows * cols && heap.size() > 0)\r\n    visit(heap.pop());\r\n\r\n  if (found) traceOptimalPath();\r\n\r\n  return [grid, visitedNodes, optimal];\r\n};\r\n\r\nexport default dijkstra;\r\n","import Heap from \"heap\";\r\n\r\nconst nodeCmp = (a, b) => {\r\n  return a.heuristic + a.distance - (b.heuristic + b.distance);\r\n};\r\n\r\nconst astar = (grid, gridProps) => {\r\n  const visitedNodes = [];\r\n  const optimal = [];\r\n  const heap = new Heap(nodeCmp);\r\n  heap.push(grid[gridProps.start.row][gridProps.start.col]);\r\n\r\n  const { rows, cols } = gridProps;\r\n\r\n  let found = null;\r\n\r\n  const visit = (node) => {\r\n    if (node == null || (node.wall && !node.isStart && !node.isEnd)) return;\r\n\r\n    node.visited = true;\r\n    visitedNodes.push(node);\r\n    node.visitedIndex = visitedNodes.length - 1;\r\n\r\n    const { row, col } = node;\r\n    if (node.isStart) node.distance = 0;\r\n    if (node.isEnd) {\r\n      found = node;\r\n      return;\r\n    }\r\n    for (let i = row - 1; i <= row + 1; i++) {\r\n      if (i < 0 || i >= grid.length) continue;\r\n      for (let j = col - 1; j <= col + 1; j++) {\r\n        if (i !== row && j !== col) continue; // diagonals not counted, may choose to change that later\r\n        if (j < 0 || j >= grid[i].length || grid[i][j].visited) continue;\r\n\r\n        const initDistance = grid[i][j].distance;\r\n        const calcDistance = grid[i][j].weight + node.distance;\r\n        const heuristic = Math.sqrt(\r\n          Math.pow(i - gridProps.end.row, 2) +\r\n            Math.pow(j - gridProps.end.col, 2)\r\n        ); // Euclidean Distance as heuristic\r\n\r\n        if (initDistance > calcDistance) {\r\n          grid[i][j].distance = calcDistance;\r\n          grid[i][j].prev = node;\r\n          grid[i][j].heuristic = heuristic;\r\n        }\r\n\r\n        if (initDistance === Infinity) heap.push(grid[i][j]);\r\n        else heap.updateItem(grid[i][j]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const traceOptimalPath = () => {\r\n    let prev = found;\r\n\r\n    while (prev != null) {\r\n      prev.optimal = true;\r\n      optimal.push(prev);\r\n      prev = prev.prev;\r\n    }\r\n  };\r\n\r\n  while (!found && visitedNodes.length < rows * cols && heap.size() > 0)\r\n    visit(heap.pop());\r\n\r\n  if (found) traceOptimalPath();\r\n\r\n  return [grid, visitedNodes, optimal];\r\n};\r\n\r\nexport default astar;\r\n","import dijkstra from \"../search/dijkstra\";\r\nimport astar from \"../search/astar\";\r\n\r\nconst supportedAlgorithms = {\r\n  dijkstra,\r\n  astar,\r\n};\r\n\r\nexport default supportedAlgorithms;\r\n","import { useState } from \"react\";\r\nimport \"./Accordion.css\";\r\nimport clsx from \"classnames\";\r\n\r\nconst Accordion = (props) => {\r\n  const { header, body } = props;\r\n  const [active, setActive] = useState(false);\r\n\r\n  const classes = clsx({\r\n    \"accordion-button\": true,\r\n    active: active,\r\n  });\r\n\r\n  return (\r\n    <div className=\"accordion\">\r\n      <button className={classes} onClick={() => setActive(!active)}>\r\n        {header}\r\n      </button>\r\n      {active && <div className=\"panel\">{body}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion;\r\n","import { useContext, useRef, useState, useEffect, useMemo } from \"react\";\r\nimport PathfindingContext from \"../../context/PathfindingContext\";\r\nimport { genNodeGrid, copyGrid } from \"../NodeGrid/gridHelper\";\r\nimport supportedAlgorithms from \"../../search/supportedAlgorithms\";\r\nimport \"./Settings.css\";\r\nimport Accordion from \"../components/accordion/Accordion\";\r\n\r\nconst Settings = (props) => {\r\n  const [state, dispatch] = useContext(PathfindingContext);\r\n  const { gridProps, grid, sortingProps } = state;\r\n  const [dragging, setDragging] = useState({\r\n    active: false,\r\n    initialX: 0,\r\n    initialY: 0,\r\n    currentX: 0,\r\n    currentY: 0,\r\n    offsetX: 0,\r\n    offsetY: 0,\r\n  });\r\n  const settingsDiv = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function setTranslate(xPos, yPos, el) {\r\n      el.style.transform = \"translate3d(\" + xPos + \"px, \" + yPos + \"px, 0)\";\r\n    }\r\n\r\n    dragging.active &&\r\n      setTranslate(dragging.currentX, dragging.currentY, settingsDiv.current);\r\n  }, [dragging]);\r\n\r\n  const reset = () => {\r\n    dispatch({ type: \"SET_GRID\", payload: genNodeGrid(gridProps) });\r\n    dispatch({ type: \"SET_SORTING_INACTIVE\" });\r\n  };\r\n\r\n  const softReset = () => {\r\n    dispatch({\r\n      type: \"SET_GRID\",\r\n      payload: copyGrid(grid, { unvisited: true }),\r\n    });\r\n    dispatch({ type: \"SET_SORTING_INACTIVE\" });\r\n  };\r\n\r\n  const performSearch = () => {\r\n    if (sortingProps.active) return;\r\n\r\n    dispatch({ type: \"SET_SORTING_ACTIVE\" });\r\n    const gridCopy = copyGrid(grid, { unvisited: true });\r\n    if (gridProps.start != null && gridProps.end != null) {\r\n      const [result] = supportedAlgorithms[sortingProps.type](\r\n        gridCopy,\r\n        gridProps\r\n      );\r\n      dispatch({ type: \"SET_GRID\", payload: result });\r\n    }\r\n  };\r\n\r\n  const onAnimationSpeedChange = (e) =>\r\n    dispatch({\r\n      type: \"SET_SORTING_SPEED\",\r\n      payload: parseFloat(e.target.value),\r\n    });\r\n\r\n  const onWeightedToggle = (e) => {\r\n    dispatch({ type: \"SET_WEIGHTED_GRID\", payload: e.target.checked });\r\n    e.target.checked === false &&\r\n      dispatch({\r\n        type: \"SET_GRID\",\r\n        payload: copyGrid(grid, { unvisited: true, weighted: false }),\r\n      });\r\n  };\r\n\r\n  const onAlgoToggle = (e) => {\r\n    softReset();\r\n    dispatch({\r\n      type: \"SET_SORTING_TYPE\",\r\n      payload: e.target.options[e.target.selectedIndex].text,\r\n    });\r\n  };\r\n\r\n  const generateRandomWeightedGraph = (e) => {\r\n    dispatch({\r\n      type: \"SET_GRID\",\r\n      payload: copyGrid(grid, { unvisited: true, weighted: true }),\r\n    });\r\n  };\r\n\r\n  const onDrag = (e) => {\r\n    if (!dragging.active && e.currentTarget === settingsDiv.current) return;\r\n\r\n    let currentX, currentY;\r\n    e.preventDefault();\r\n    // e.currentTarget.clientWidth;\r\n\r\n    currentX = e.clientX - dragging.offsetX;\r\n    currentY = e.clientY - dragging.offsetY;\r\n\r\n    setDragging({ ...dragging, currentX, currentY });\r\n  };\r\n\r\n  const accordions = [\r\n    {\r\n      header: \"Algorithm Properties\",\r\n      body: (\r\n        <>\r\n          <label htmlFor=\"algos\">Choose an algorithm: </label>\r\n          <select\r\n            id=\"algos\"\r\n            name=\"algos\"\r\n            value={sortingProps.type}\r\n            onChange={onAlgoToggle}\r\n          >\r\n            {Object.keys(supportedAlgorithms).map((el, index) => (\r\n              <option key={index} value={el}>\r\n                {el}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <label htmlFor=\"animation-speed\">Speed (ms): </label>\r\n          <input\r\n            type=\"number\"\r\n            step=\"1\"\r\n            name=\"animation-speed\"\r\n            onChange={onAnimationSpeedChange}\r\n            value={sortingProps.speed}\r\n            disabled={sortingProps.active}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      header: \"Grid Properties\",\r\n      body: (\r\n        <>\r\n          <label>Grid Dimensions: </label>\r\n          <br />\r\n          Rows:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            id=\"grid-rows\"\r\n            name=\"grid-rows\"\r\n            value={gridProps.rows}\r\n            // max={30}\r\n            disabled={sortingProps.active}\r\n            style={{\r\n              width: 50,\r\n            }}\r\n            onChange={(e) =>\r\n              dispatch({\r\n                type: \"SET_GRID_PROPS\",\r\n                payload: { ...state.gridProps, rows: e.target.value },\r\n              })\r\n            }\r\n          />{\" \"}\r\n          Cols:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            id=\"grid-cols\"\r\n            name=\"grid-cols\"\r\n            value={gridProps.cols}\r\n            // max={60}\r\n            disabled={sortingProps.active}\r\n            style={{\r\n              width: 50,\r\n            }}\r\n            onChange={(e) =>\r\n              dispatch({\r\n                type: \"SET_GRID_PROPS\",\r\n                payload: { ...state.gridProps, cols: e.target.value },\r\n              })\r\n            }\r\n          />\r\n          <br />\r\n          <label htmlFor=\"weighted\">Weighted Grid: </label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weighted\"\r\n            name=\"weighted\"\r\n            value=\"weighted\"\r\n            defaultChecked={gridProps.weighted}\r\n            onClick={onWeightedToggle}\r\n            disabled={sortingProps.active}\r\n          />\r\n          {gridProps.weighted && (\r\n            <>\r\n              <br />\r\n              <button\r\n                className=\"generate-random-weights-btn\"\r\n                onClick={generateRandomWeightedGraph}\r\n                disabled={sortingProps.active}\r\n              >\r\n                Generate Random Weights\r\n              </button>\r\n            </>\r\n          )}\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"settings\" +\r\n        (state.mouseDown && !state.sortingProps.active ? \" pass-through\" : \"\")\r\n      }\r\n      ref={settingsDiv}\r\n      //onDragStart={(e) => e.preventDefault()}\r\n      onMouseUp={(e) => {\r\n        setDragging({\r\n          ...dragging,\r\n          active: false,\r\n          initialX: dragging.currentX,\r\n          initialY: dragging.currentY,\r\n        });\r\n      }}\r\n      onMouseLeave={(e) => {\r\n        dragging.active &&\r\n          setDragging({\r\n            ...dragging,\r\n            active: false,\r\n            initialX: dragging.currentX,\r\n            initialY: dragging.currentY,\r\n          });\r\n      }}\r\n      onMouseDown={(e) => {\r\n        setDragging({\r\n          ...dragging,\r\n          active: true,\r\n          offsetX: e.clientX - dragging.initialX,\r\n          offsetY: e.clientY - dragging.initialY,\r\n        });\r\n      }}\r\n      onMouseMove={onDrag}\r\n    >\r\n      <h1 className=\"settings-header\">Pathfinding Visualizer</h1>\r\n      <div className=\"settings-options\">\r\n        {accordions.map((accordion, index) => (\r\n          <Accordion\r\n            key={accordion.header + index}\r\n            header={accordion.header}\r\n            body={accordion.body}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <button className=\"visualizer-btn\" onClick={performSearch}>\r\n          Visualize\r\n        </button>\r\n        <button className=\"soft-reset-btn\" onClick={softReset}>\r\n          Soft Reset\r\n        </button>\r\n        <button className=\"reset-btn\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { useReducer } from \"react\";\r\nimport {\r\n  reducer as pathfindingReducer,\r\n  initialState as pathfindingInitialState,\r\n} from \"../reducers/PathfindingReducer\";\r\nimport PathfindingContext from \"../context/PathfindingContext\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport NodeGrid from \"./NodeGrid/NodeGrid\";\r\nimport Settings from \"./Settings/Settings\";\r\n\r\nconst PathfindingVisualizer = (props) => {\r\n  const [state, dispatch] = useReducer(\r\n    pathfindingReducer,\r\n    pathfindingInitialState\r\n  );\r\n\r\n  const { grid } = state;\r\n\r\n  return (\r\n    <PathfindingContext.Provider value={[state, dispatch]}>\r\n      <div className=\"pathfinding-visualizer\">\r\n        <Settings />\r\n        <NodeGrid nodeGrid={grid} />\r\n      </div>\r\n    </PathfindingContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n","import \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\nimport \"core-js/features/array/find\";\r\nimport \"core-js/features/array/includes\";\r\nimport \"core-js/features/number/is-nan\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}